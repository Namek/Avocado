<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Title of the document</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.0/jquery.min.js"></script>
    <script src="js/rivets.bundled.min.js"></script>
    <style>
        html, body {
            margin: 10px;
        }
        * {
            font-family: Courier New, Courier, monospace;
        }
        .col {
            float: left;
            margin-left: 2em;
            margin-right: 2em;
        }

    </style>
</head>

<body>
    <h1>Avocado debug</h1>

    <div id="info">
        <h3 rv-if="connected">Connected (<a href="#" rv-on-click="event.disconnect">Disconnect</a>)</h3>
        <h3 rv-unless="connected">Disconnected (<a href="#" rv-on-click="event.connect">Connect</a>)</h3>
        <h4 rv-show="error">Cannot connect to websocket</h4>
        <div id="control" rv-show="connected">
            <div>Control</div>
            <button rv-on-click="event.emu.pause">Pause</button>
            <button rv-on-click="event.emu.step">Step</button>
        </div>
        
        <div rv-show="connected">
            <div id="cpu" class="col">
                <p>CPU</p>
                <div>pc: { emu.cpu.pc | hex32 }</div>
                <div>hi: { emu.cpu.hi | hex32 }</div>
                <div>lo: { emu.cpu.lo | hex32 }</div>

                <p>Registers</p>
                <ul>
                    <li rv-each-reg="emu.cpu.reg">
                        r{ %reg% }: { reg | hex32 }
                    </li>
                </ul>
            </div>

            <div id="timer" class="col">
                <div rv-each-timer="emu.timer">
                    <p>Timer{ %timer% }</p>
                    <div>value: { timer.value | hex16 }</div>
                    <div>mode: { timer.mode | hex16 }</div>
                    <div>target: { timer.target | hex16 }</div>
                </div>
            </div>

            <div id="interrupt" class="col">
                <p>Interrupt</p>
                <div>status: { emu.interrupt.status | hex16 }</div>
                <div>mask: { emu.interrupt.mask | hex16 }</div>
            </div>
        </div>
    </div>

<script language="javascript" type="text/javascript">
    var ws;
    var data = {
        connecting: false,
        connected: false,
        error: false,
        cpu: {},
        event: {
            emu: {
                pause: function() {
                    console.log("Pause emulation");
                    ws.send("P");
                },
                step: function() {
                    console.log("Single step");
                    ws.send("S");
                }
            },
            connect: function() {
                connect();
            },
            disconnect: function() {
                ws.close();
            }
        }
    };

    function hex(value, size) {
        if (value == undefined) {
            return "";
        }
        var h = value.toString(16);
        while (h.length < size) {
            h = "0" + h;
        }
        return "0x" + h;
    }

    rivets.formatters.hex32 = function(value) {
        return hex(value, 8);
    }
    rivets.formatters.hex16 = function(value) {
        return hex(value, 4);
    }

    rivets.bind($('#info'), data );
    connect();


    function connect() {
        ws = new WebSocket("ws://liquid.noip.me:3000");
        var interval = 0;
        
        ws.onopen = function(evt) { 
            data.connected = true;
            data.error = false;
            interval = setInterval(function() {ws.send(".")}, 50);
        };
        ws.onclose = function(evt) {
            data.connected = false;
            data.cpu = {};
            clearInterval(interval);
        };
        ws.onmessage = function(evt) { 
            var j = JSON.parse(evt.data);
            data.emu = j;
        }
        ws.onerror = function(evt) { 
            data.connected = false;
            data.error = true;
            clearInterval(interval);
        };
    }
  </script>

</body>
</html>